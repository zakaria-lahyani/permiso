# Test Dockerfile for permiso Authentication System
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

# Configure Poetry
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=0 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Set work directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml poetry.lock* ./

# Copy project files first
COPY . .

# Install dependencies (including test dependencies) and the project
RUN poetry install --with dev && rm -rf $POETRY_CACHE_DIR

# Create directories for test reports
RUN mkdir -p /app/test-reports /app/htmlcov

# Install pytest globally as backup and create test script
RUN pip install pytest pytest-cov pytest-asyncio && \
    echo '#!/bin/bash' > /app/run_tests.sh && \
    echo 'cd /app' >> /app/run_tests.sh && \
    echo 'export PYTHONPATH=/app:$PYTHONPATH' >> /app/run_tests.sh && \
    echo 'if command -v poetry >/dev/null 2>&1; then' >> /app/run_tests.sh && \
    echo '  poetry run pytest "$@"' >> /app/run_tests.sh && \
    echo 'else' >> /app/run_tests.sh && \
    echo '  pytest "$@"' >> /app/run_tests.sh && \
    echo 'fi' >> /app/run_tests.sh && \
    chmod +x /app/run_tests.sh

# Keep container running for debugging
CMD ["tail", "-f", "/dev/null"]