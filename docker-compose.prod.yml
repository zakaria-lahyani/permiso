# Production override for Docker Compose
# Use with: docker-compose -f docker-compose.new.yml -f docker-compose.prod.yml
version: '3.8'

services:
  # Production PostgreSQL configuration
  postgres:
    container_name: permiso-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-permiso}
      POSTGRES_USER: ${POSTGRES_USER:-permiso}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-prod-db.sql:ro
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Production Redis configuration
  redis:
    container_name: permiso-redis-prod
    volumes:
      - redis_prod_data:/data
      - ./docker/configs/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Production application configuration
  app:
    container_name: ""  # Explicitly remove container_name to allow replicas
    build:
      target: production
      args:
        INSTALL_DEV: "false"
    environment:
      # Production settings
      ENVIRONMENT: production
      DEBUG: "false"
      
      # Database configuration
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-permiso}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-permiso}
      DATABASE_POOL_SIZE: ${DATABASE_POOL_SIZE:-20}
      DATABASE_MAX_OVERFLOW: ${DATABASE_MAX_OVERFLOW:-10}
      DATABASE_ECHO: "false"
      
      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      
      # JWT configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-RS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # Security settings (strict for production)
      PASSWORD_MIN_LENGTH: ${PASSWORD_MIN_LENGTH:-12}
      PASSWORD_REQUIRE_UPPERCASE: "true"
      PASSWORD_REQUIRE_LOWERCASE: "true"
      PASSWORD_REQUIRE_DIGITS: "true"
      PASSWORD_REQUIRE_SPECIAL: "true"
      
      # Rate limiting (strict for production)
      RATE_LIMIT_LOGIN: ${RATE_LIMIT_LOGIN:-5/minute}
      RATE_LIMIT_REGISTER: ${RATE_LIMIT_REGISTER:-3/hour}
      RATE_LIMIT_API: ${RATE_LIMIT_API:-100/minute}
      
      # CORS settings
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: json
      
      # API Documentation (disabled for production)
      DOCS_URL: ""
      REDOC_URL: ""
      OPENAPI_URL: ""
      
      # Monitoring
      ENABLE_METRICS: "true"
      METRICS_PATH: /metrics
    volumes:
      - prod_logs:/app/logs:rw
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: ${APP_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Production migration service
  migrate:
    container_name: permiso-migrate-prod
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-permiso}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-permiso}
      ENVIRONMENT: production

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: permiso-nginx-prod
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/configs/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/configs/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - permiso-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Log aggregation service
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: permiso-fluentd
    volumes:
      - ./docker/configs/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - prod_logs:/app/logs:ro
      - nginx_logs:/var/log/nginx:ro
    depends_on:
      - app
      - nginx
    networks:
      - permiso-network
    restart: unless-stopped
    profiles:
      - logging

# Production-specific volumes
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./data/postgres}
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-./data/redis}
  prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NGINX_LOGS_PATH:-./logs/nginx}

# Production network with custom subnet
networks:
  permiso-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1